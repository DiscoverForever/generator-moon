import * as AV from 'leanengine';
<%_ 
const fields = entity.body;
const ownenums = enums.filter(enumItem => fields.some(field => field.type === enumItem.name));
const types = {
  TypeScript: {
    'Boolean': 'boolean', 
    'Integer': 'number', 
    'Float': 'number', 
    'Double': 'number',
    'BigDecimal': 'number', 
    'LocalDate': 'Date', 
    'Instant': 'any', 
    'ZonedDateTime': 'Date', 
    'String': 'string',
    'UUID': 'string',
    'ImageBlob': 'any'
  }
};
const customTypes = (str) => {
  let type = {
    name: 'any',
    tableName: null
  };
  if ((/^Pointer_/).test(str)) type = { name: 'AV.Object', tableName: str.replace(/^Pointer_(.*)$/g, '$1') };
  if (ownenums.some(enumItem => enumItem.name === str)) type = { name: str };
  return type;
};

_%>
<% ownenums.forEach(enumItem => { %>
export const enum <%- enumItem.name %> {
<%_ enumItem.values.forEach((value, index) => { _%>
  <%- value %><%- index === enumItem.values.length - 1 ? '' : ',' %>
<% }) _%>
}
<% }); %>

/**
 * <%= entity.javadoc %>
 * @export
 * @class <%= entity.name %>
 * @extends {AV.Object}
 */
export class <%= entity.name %> extends AV.Object {

    constructor() {
        super();
    }
<%_ entity.body.forEach(field => { _%>

    /**
     * <%= field.javadoc %>
     * @memberof <%= entity.name %>
     */
    set <%- field.name %>(<%- field.name %>: <%- types.TypeScript[field.type] ? types.TypeScript[field.type] : customTypes(field.type)['name'] %>) {
      this.set('<%- field.name %>', <%- field.name %>);
    }

    /**
     * <%= field.javadoc %>
     * @memberof <%= entity.name %>
     */
    get <%- field.name %>() {
      return this.get('<%- field.name %>');
    }
<%_ }); _%>

}
AV.Object.register(<%= entity.name %>);